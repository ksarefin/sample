<?php
/**
 * topControllerClass.php
 * 
 * @created on 2012/01/25
 * @package    From
 * @author     Arefin Tuhin
 * @version    Id: profile 2692 2012/01/25 - 15:51:53 fabien 
 * 
 *File content
     topControllerClass.php
 *     
 */
 
 class topControllerClass extends Configuration {      protected $wpcms;  protected $db_model;  protected $data_class;  protected $html_code_class;  protected $mail_template_class;  protected $error_ckeck;  protected $form_id;  protected $form_data;  protected $ini_parser;  protected $page;  public function commonAction(){      $this->wpcms = new WpCms();   $this->db_model = new topModelClass();   $this->data_class = new DataClass();   $this->ini_parser = new IniParserClass();   $this->html_code_class = new HtmlCodeClass();   $this->mail_template_class = new MailTemplateClass();   $this->error_ckeck = new ErrorCheckClass();   $url_id = $this->getUrlParam('form_id');   $this->form_id = get_id($url_id);   if ($this->form_id)    $this->setAttribute('form_id', $this->form_id);       $this->viewAssign('form_id', $this->getAttribute('form_id'));   if ($this->getAttribute('form_id'))     $this->form_data = $this->db_model->getFormData($this->getAttribute('form_id'));   $url_page_no = $this->getUrlParam('page');   $this->page = get_id($url_page_no);   $page = $this->page ? $this->page : 1;    $this->setAttribute('page', $page);   $this->viewAssign('page', $page);    $list = $this->db_model->getFormList();   $this->viewAssign('list', $list);   $this->viewAssign('page_title', $this->form_data['title']);      }    public function indexAction(){   $this->viewAssign('page_title', 'Form 一覧');   $this->setDisplay('list');  }    public function errorAction(){   $err_msg = $this->getAttribute('err_msg');   $this->setDisplay('error');  }    public function newEntryAction(){   if (empty($this->form_data)){    $url_array = array(      $this->module_name, 'error',     );    $redirect_url = $this->makeUrl($url_array);     $this->redirect($redirect_url);    exit;   }   $form_id = $this->getAttribute('form_id');   $page = $this->getAttribute('page');   $this->htmlCode();      $ini_header = $this->getAttribute('ini_header');   $total_page = count($ini_header)-1;   $this->viewAssign('total_page', $total_page);   if ($page == count($ini_header))    $this->viewAssign('last_page', 'last');   else     $this->viewAssign('last_page', 'page');   $this->db_model->pageViewUpdate('form', 'form_view', $form_id);      if ($this->form_data['form_style'] == 2)    $template = 'form_'.$form_id.'_'.$page;   else     $template = 'form_'.$form_id;           $this->setDisplay($template);        }      public function backFormAction(){   if (empty($this->form_data)){        $url_array = array(      $this->module_name, 'error',     );    $redirect_url = $this->makeUrl($url_array);     $this->redirect($redirect_url);        exit;   }      $form_id = $this->getAttribute('form_id');      $page = $this->getAttribute('page');         $ini_header = $this->getAttribute('ini_header');      $total_page = count($ini_header)-1;   $this->viewAssign('total_page', $total_page);   if ($page == count($ini_header))    $this->viewAssign('last_page', 'last');   else     $this->viewAssign('last_page', 'page');          $form_array = $this->getAttribute('form_array');   $form_data = $this->form_data;   $post = $this->getAttribute('back_post');   $get_back_paging_post = $this->getAttribute('back_paging_post');      if ($form_data['form_style'] == 2)    $post = $get_back_paging_post;      if (empty($post)){        $url_array = array(      $this->module_name, 'newEntry',      'form_id', make_id($form_id)    );    $redirect_url = $this->makeUrl($url_array);     $this->redirect($redirect_url);         exit;      }            $this->viewAssign('pd', $post);      if (is_array($post)){        foreach ($post as $key=>$val){         if (preg_match('/\bynradio_[0-9]\b/', $key)){            if ($form_data['form_style'] == 2)       $ynpost_key = $paging_post[$key];      elseif ($form_data['form_style'] == 1)       $ynpost_key = $post[$key];            if ($ynpost_key == 1){       $ynfields_form_array = $form_array[$key]['form_array'];       $form_array = array_merge($form_array,$ynfields_form_array);      }           }         }       }      $err_msg = $this->getAttribute('err_msg');      $this->viewAssign('err', $err_msg);      $this->htmlCode('back');      if ($this->form_data['form_style'] == 2)    $template = 'form_'.$form_id.'_'.$page;   else     $template = 'form_'.$form_id;          $this->setDisplay($template);       }        public function confAction(){         $form_id = $this->getAttribute('form_id');      $page = $this->getAttribute('page');      $form_array = $this->getAttribute('form_array');      $form_data = $this->form_data;      if (empty($form_array)){        $url_array = array(      $this->module_name, 'newEntry',      'form_id', make_id($form_id)    );    $redirect_url = $this->makeUrl($url_array);     $this->redirect($redirect_url);         exit;        }         $post = $this->getPost();   $paging_post = $this->getAttribute('paging_post');   $save_post = array();   if (!empty($post))    $save_post = $post ;   $page_post = $post;      if (empty($post) && empty($paging_post)){    $url_array = array(      $this->module_name, 'newEntry',      'form_id', make_id($form_id)    );    $redirect_url = $this->makeUrl($url_array);     $this->redirect($redirect_url);         exit;       }      foreach ($post as $key=>$val){        if (is_array($val)){          if (array_key_exists('other', $val)){      $other = $val['other'];      unset($val['other'],$post[$key]);            if (key_exists(1, $val))       $post[$key][] = $val;      else       $post[$key][] = $val[0];               $post[$key][] = $other;     }else {      $post[$key] = $val;     }         }       }      $conf_form_array = array();   foreach ($form_array as $f_key=>$f_val){        $conf_form_array[$f_key] = $form_array[$f_key];        if (preg_match('/\bynradio_[0-9]\b/', $f_key)){          $paging_post = $this->getAttribute('paging_post');          if ($form_data['form_style'] == 2)      $ynpost_key = $post[$f_key] ? $post[$f_key] : $paging_post[$f_key];     elseif ($form_data['form_style'] == 1)      $ynpost_key = $post[$f_key];          if ($ynpost_key == 1){      $ynfields_form_array = $form_array[$f_key]['form_array'];      $conf_form_array = array_merge($conf_form_array,$ynfields_form_array);     }        }       }       $final_confirm_array = $conf_form_array;       $ini_header = $this->getAttribute('ini_header');      if ($form_data['form_style'] == 2){        $page_conf_form_array = array();    $page_header = $ini_header[$page-1];    $expl = explode('_', $page_header);    $set_id = $expl[(count($expl)-1)];    $get_paging_entry_list = $this->db_model->getPagingEntry($form_id, $set_id);          foreach ($get_paging_entry_list as $page_key => $page_val){            if(preg_match('/\bprivacy_[0-9]/', $page_val['name'])) continue;             $page_conf_form_array[$page_val['name']] = $form_array[$page_val['name']];          }        foreach ($conf_form_array as $c_key=>$c_val){          if (key_exists($c_key, $post)){            if (preg_match('/\bynradio_[0-9]_/', $c_key))       $page_conf_form_array[$c_key] = $c_val;      else        $page_conf_form_array[$c_key] = $form_array[$c_key];           }else{            foreach ($post as $c_p_key => $c_p_val){              if(preg_match('/\b'.$c_key.'_/', $c_p_key))        $page_conf_form_array[$c_key] = $form_array[$c_key];            }            if (!empty($_FILES)){              foreach ($_FILES as $file_key => $file_val){        if (preg_match('/\bynradio_[0-9]/', $c_key)){                  if (preg_match('/\bynradio_[0-9]/', $file_key, $match))          $page_conf_form_array[$c_key] = $form_array[$match[0]]['form_array'][$c_key];                 }elseif ($file_key == $c_key){         $page_conf_form_array[$c_key] = $form_array[$c_key];        }               }             }           }         }        $conf_form_array = $page_conf_form_array;       }      $image_fields  = array();   $pdf_fields   = array();   foreach ($conf_form_array as $cf_key=>$cf_val){        if (preg_match('/image_[0-9]/', $cf_key))     $image_fields[] = $cf_key;        if (preg_match('/pdf_[0-9]/', $cf_key))     $pdf_fields[] = $cf_key;      }      foreach ($image_fields as $image_field){        if (empty($post[$image_field])){      if($_FILES[$image_field]['name']){            if (is_array($conf_form_array[$image_field]['options'])){              foreach ($conf_form_array[$image_field]['options'] as $image_type){        $image_types[] = $this->data_class->getImageTypeName($image_type);       }            }elseif (preg_match('/::/', $conf_form_array[$image_field]['options']))        $image_types = explode('::', $conf_form_array[$image_field]['options']);            $save_post[$image_field] = $post[$image_field] = file_upload($image_field, $image_types, 'image');            if ($form_data['form_style'] == 2)       $page_post[$image_field] = $post[$image_field];         }    }      }      foreach ($pdf_fields as $pdf_field){      if (empty($post[$pdf_field])){        if($_FILES[$pdf_field]['name']){          $save_post[$pdf_field] = $post[$pdf_field] = file_upload($pdf_field, array('pdf'), 'pdf');          if ($form_data['form_style'] == 2)       $page_post[$pdf_field] = $post[$pdf_field];         }       }  }       $this->setAttribute('save_post', $save_post);      $err_msg = $this->error_ckeck->formErrorCheck($conf_form_array, $post);      if (!empty($post))    $this->setAttribute('back_post', $post);      $back_paging_post = $post;       if (!empty($post))    $this->viewAssign('pd', h_array($post));      $get_back_paging_post = $this->getAttribute('back_paging_post');   $this->removeAttribute('back_paging_post');   if (!empty($get_back_paging_post) && is_array($get_back_paging_post))    $set_back_paging_post = array_merge($get_back_paging_post, $back_paging_post);   else     $set_back_paging_post = $back_paging_post;         $this->setAttribute('back_paging_post', $set_back_paging_post);      if ($err_msg){        $this->setAttribute('err_msg', $err_msg);        $url_array = array(      $this->module_name, 'backForm',      'form_id', make_id($form_id)    );        if (!empty($page)) {     $url_array = array_merge($url_array, array('page', make_id($page)));    }        $redirect_url = $this->makeUrl($url_array);    $this->redirect($redirect_url);        exit;      }else {        $this->removeAttribute('err_msg');        if ($form_data['form_style'] == 1){          $this->viewAssign('form_style', 'consul');         $conf_html  = $this->html_code_class->htmlConf($conf_form_array, 'post_form_'.$form_id);     $this->viewAssign('conf_html', $conf_html);     $mail_template = $this->mail_template_class->MailTemplate($conf_form_array, 'mail_template_'.$form_id);     $this->setAttribute('mail_template', $mail_template);           $this->db_model->pageViewUpdate('form', 'conf_view', $form_id);               $this->setDisplay('conf');         }elseif ($form_data['form_style'] == 2){          $this->viewAssign('form_style', 'paging');          $paging_post = $this->getAttribute('paging_post');     $this->removeAttribute('paging_post');     if (!empty($paging_post) && is_array($paging_post))      $paging_post = array_merge($paging_post, $page_post);     else       $paging_post = $page_post;           $this->setAttribute('paging_post', $paging_post);          $ini_header = $this->getAttribute('ini_header');          if (count($ini_header) != $page){            $next_page = $page+1;            if ($next_page == count($ini_header))       $this->viewAssign('last_page', 'last');      else        $this->viewAssign('last_page', 'page');            $url_array = array(        $this->module_name, 'newEntry',        'form_id', make_id($form_id),       'page', make_id($next_page),      );      $redirect_url = $this->makeUrl($url_array);      $this->redirect($redirect_url);            }elseif (count($ini_header) == $page){            $this->viewAssign('pd', $set_back_paging_post);            $conf_html  = $this->html_code_class->htmlConf($final_confirm_array, 'post_form_'.$form_id);      $this->viewAssign('conf_html', $conf_html);            $mail_template = $this->mail_template_class->MailTemplate($final_confirm_array, 'mail_template_'.$form_id);      $this->setAttribute('mail_template', $mail_template);            $this->db_model->pageViewUpdate('form', 'conf_view', $form_id);                        $this->setDisplay('conf');          }         }       }        }          public function saveAction(){   $form_id = $this->getAttribute('form_id');      $post = $this->getAttribute('save_post');   $paging_post = $this->getAttribute('paging_post');   $form_data = $this->form_data;   if ($form_data['form_style'] == 2){    $post = $paging_post;   }   $set_data  = array();   $set_array = array();   foreach ($post as $p_key=>$p_val){        if (is_array($p_val)){          if (key_exists('other', $p_val)){      $other = $p_val['other'];      unset($p_val['other'],$post[$p_key]);            if (key_exists(1, $p_val))       $post[$p_key]  = join('::', $p_val);      else       $post[$p_key] = $p_val[0];               $post[$p_key] = $post[$p_key].':other:'.$other;           }else {      $post[$p_key] = join('::', $p_val);     }    }            $p_key_expl = explode('_', $p_key);    $field_key = $p_key_expl[0].'_'.$p_key_expl[1];        if (preg_match('/name_[0-9]/', $p_key)){          $set_data['name'][$field_key][] = $p_key.':=:'.$p_val;     unset($post[$p_key]);              }            if (preg_match('/address_[0-9]/', $p_key)){          $set_data['address'][$field_key][] = $p_key.':=:'.$p_val;     unset($post[$p_key]);              }            if (preg_match('/mail_[0-9]/', $p_key)){          $auto_mail = $this->db_model->checkAutoMail($form_id, $p_key);     if ($auto_mail == 1){      if (preg_match('/_conf/', $p_key)) continue;      $auto_mail_array[] = $p_val;     }          $set_data['mail'][$field_key][] = $p_key.':=:'.$p_val;     unset($post[$p_key]);print "<br />";         }        if (preg_match('/birthday_[0-9]/', $p_key)){          $set_data['birthday'][$field_key][] = $p_key.':=:'.$p_val;     unset($post[$p_key]);              }        if (preg_match('/tel_[0-9]/', $p_key)){          $set_data['tel'][$field_key][] = $p_key.':=:'.$p_val;     unset($post[$p_key]);              }        if (preg_match('/password_[0-9]/', $p_key)){          $set_data['password'][$field_key][] = $p_key.':=:'.$p_val;     unset($post[$p_key]);              }        if (preg_match('/svid_[0-9]_fid_[0-9]_sid_[0-9]/', $p_key)){          $expl_survey_name = explode('_sid_', $p_key);     $set_id = $expl_survey_name[1];          if (!in_array($set_id, $set_array)){      $this->db_model->updateAnswerCount($p_key);      array_push($set_array, $set_id);     }        }            if (preg_match('/svid_[0-9]_fid_[0-9]_sid_[0-9]/', $p_key)){     if (!empty($p_val)){      $this->db_model->updateSurveyReport($p_key, $post[$p_key]);     }         }           }            $ynradio = array();   foreach ($post as $p_key=>$p_val){        if (preg_match('/ynradio_[0-9]/', $p_key)){          $p_key_expl       = explode('_', $p_key);     $ynradio_key      = $p_key_expl[0].'_'.$p_key_expl[1];     $ynradio[$ynradio_key][] = $p_key.':=:'.$p_val;              unset($post[$p_key]);        }       }         foreach ($ynradio as $yn_key=>$yn_val){        $post[$yn_key] = join('|fd|', $yn_val);       }      foreach ($set_data as $set_row){        foreach ($set_row as $s_key=>$s_val){     $post[$s_key] = join('|fd|', $s_val);    }       }         unset($post['page_no']);   if (!empty($auto_mail_array)) $post['mail_send'] = 1;    $this->db_model->save($form_id, $post);	$replace_array = array('<br>', '<br />', '<p>', '</p>');	$mail_template = str_replace($replace_array, "\n", $this->getAttribute('mail_template'));   $customer_mail_body = str_replace($replace_array, "\n", $form_data['customer_mail_header'])."\n\n".$mail_template."\n\n".str_replace($replace_array, "\n", $form_data['customer_mail_footer']);      $admin_mail_body = str_replace($replace_array, "\n", $form_data['admin_mail_header'])."\n\n".$mail_template."\n\n".str_replace($replace_array, "\n", $form_data['admin_mail_footer']);         foreach ($auto_mail_array as $mail){    send_mail($form_data['admin_mail1'], $form_data['customer_mail_title'], $customer_mail_body, $mail);   }         if (!empty($form_data['admin_mail1']))    send_mail($form_data['admin_mail1'], $form_data['admin_mail_title'], $admin_mail_body, $form_data['admin_mail1']);      if (!empty($form_data['admin_mail2']))    send_mail($form_data['admin_mail2'], $form_data['admin_mail_title'], $admin_mail_body, $form_data['admin_mail2']);       if (!empty($form_data['admin_mail3']))    send_mail($form_data['admin_mail3'], $form_data['admin_mail_title'], $admin_mail_body, $form_data['admin_mail3']); $mail_data = array( 'mail_from'		=> $form_data['admin_mail1'], 'mail_to'		=> $auto_mail_array[0], 'mail_subject'	=> $form_data['customer_mail_title'], 'mail_body'		=> $customer_mail_body, ); if (!empty($auto_mail_array[0])){ $this->db_model->saveMailContent($form_id, $mail_data); } $this->db_model->pageViewUpdate('form', 'send_view', $form_id);      $this->removeAttribute('post');   $this->removeAttribute('paging_post');       $url_array = array(     $this->module_name, 'thanks',   );   $redirect_url = $this->makeUrl($url_array);    $this->redirect($redirect_url);       exit;     }    public function thanksAction(){      $form_data = $this->form_data;      $this->viewAssign('thanks', $form_data['thanks']);      $this->setDisplay('thanks');        }        public function topPageViewAction(){      $this->db_model->pageViewUpdate('top', 'top_view');     }            private function htmlCode($type='form'){      $form_id = $this->getAttribute('form_id');      $form_set_list = $this->db_model->getFormSetList($form_id);    $ini_header = array();   foreach ($form_set_list as $set_row){    $check = $this->db_model->checkFormEntry($form_id, $set_row['id']);         if ($check > 0)      $ini_header[] = 'publish_form_'.$form_id.'_'.$set_row['id'];   }      $this->setAttribute('ini_header', $ini_header);      $ini_dir  = FORM_INI_DIR;   $ini_path = $ini_dir.'/'.'formset_'.$form_id.'.ini';      if (!file_exists($ini_path)){        $this->setDisplay('error');    exit;   }      $ini_parser = new IniParserClass();   $ini_array  = $ini_parser->iniParse($ini_path);         $form_html = "";   $form_array = array();   foreach ($ini_header as $ini_row){        $form_set_array = array();    $form_set_array = $ini_parser->getFormArray($ini_array, $ini_row);    $form_set_array_kyes = array_keys($form_set_array);        if (is_array($form_set_array))     $form_array = array_merge($form_array, $form_set_array);         foreach ($form_set_array_kyes as $set_key){     if (preg_match('/ynradio_[0-9]/', $set_key)){            $ynform_array[$set_key] = $form_set_array[$set_key];      $ynform_array[$set_key]['form_array'] = $this->html_code_class->makeYesNoFieldsData($set_key, $form_set_array[$set_key]);            if (is_array($ynform_array))       $form_array = array_merge($form_array, $ynform_array);     }    }             $form_html .= '<table width="100%" border="0" cellpadding="0" cellspacing="0" class="wpfTblStyle">';    $form_html .= $this->html_code_class->htmlForm($form_set_array, $ini_row, $type);    $form_html .= '</table>';   }      if (is_array($form_array))    $this->setAttribute('form_array', $form_array);      $this->viewAssign('form_html', $form_html);        }    }
 
 ?>