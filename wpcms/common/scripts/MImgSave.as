// importimport flash.display.BitmapData;import flash.geom.Rectangle;import flash.geom.Matrix;import flash.filters.BlurFilter;import flash.external.ExternalInterface;// classclass MImgSave {	////////////////////////////////////////////////////////////////////////////////////////////////////	////////////////////////////////////////////////////////////////////////////////////////////////////	//	// メンバ変数	//	////////////////////////////////////////////////////////////////////////////////////////////////////	////////////////////////////////////////////////////////////////////////////////////////////////////	//private var _script:Object = {uri:'graph_imgsave.php', tg:'_blank'};	private var _script:Object = new Object();	private var _tg;	private var _bmp:BitmapData;	private var _bmp_ary:Array = new Array();	////////////////////////////////////////////////////////////////////////////////////////////////////	////////////////////////////////////////////////////////////////////////////////////////////////////	//	// コンストラクタ	//	////////////////////////////////////////////////////////////////////////////////////////////////////	////////////////////////////////////////////////////////////////////////////////////////////////////	public function MImgSave(tg, script:Object) {		_tg     = tg ? tg : undefined;		_script = script ? script : _script;				init();	}	////////////////////////////////////////////////////////////////////////////////////////////////////	////////////////////////////////////////////////////////////////////////////////////////////////////	//	// メンバ関数	//	////////////////////////////////////////////////////////////////////////////////////////////////////	////////////////////////////////////////////////////////////////////////////////////////////////////	private function init():Void	{		_bmp = mc2bmp(_tg);		_bmp_ary = bmp2binary(_bmp);	}		public function send():Void	{		if(_script.uri!='' && _script.tg!='')		{			imgSender(_bmp_ary, {w:_bmp.width, h:_bmp.height}, _script);		}	}			////////////////////////////////////////////////////////////////////////////////////////////////////	// function定義 : mc2bmp	// 説明         : ムービークリップをビットマップデータ化	// 引数         : tg(MovieClip)	// 戻り値       : BitmapData	////////////////////////////////////////////////////////////////////////////////////////////////////	private function mc2bmp(tg, param:Object):BitmapData	{		var bmp:BitmapData = new BitmapData(tg._width, tg._height, true, 0x00FFFFFF);		if(param!=undefined) {			var mtrx:Matrix = new Matrix(param.scalex, 0, 0, param.scaley, -1*param.x, -1*param.y);			var rect:Rectangle = new Rectangle(0, 0, param.w, param.h);			bmp.draw(tg, mtrx, null, 'normal', rect, true);		} else {			bmp.draw(tg);		}		return bmp;	}		////////////////////////////////////////////////////////////////////////////////////////////////////	// function定義 : bmp2binary	// 説明         : ビットマップデータを色データの配列化	// 引数         : bmp(BitmapData)	// 戻り値       : Array	////////////////////////////////////////////////////////////////////////////////////////////////////	private function bmp2binary(bmp:BitmapData):Array	{		// BitmapデータをRGB配列にする		// 生送信だと 1px=6byte になる		var imgdata = new Array();		for(var x = 0 ; x < bmp.width ; x++)		{			for(var y = 0 ; y < bmp.height; y++)			{				var col = bmp.getPixel(x, y);				imgdata.push(("000000" + col.toString(16)).substr(-6, 6));			}		}		return imgdata;	}		function imgSender(imgdata:Array, size:Object, script:Object)	{		// データを送信		System.useCodepage = true;		var sender = new LoadVars();		sender.img_width  = size.w;			// 画像幅		sender.img_height = size.h;			// 画像高さ		sender.img_data   = imgdata.join("");		// 画像データ		sender.send(script.uri, script.tg, "POST");	}}